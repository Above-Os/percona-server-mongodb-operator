// Code generated by MockGen. DO NOT EDIT.
// Source: rs_config_manager.go

// Package mock_mongo is a generated GoMock package.
package mock_mongo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "github.com/percona/percona-server-mongodb-operator/pkg/psmdb/mongo"
)

// MockRSConfigManager is a mock of RSConfigManager interface.
type MockRSConfigManager struct {
	ctrl     *gomock.Controller
	recorder *MockRSConfigManagerMockRecorder
}

// MockRSConfigManagerMockRecorder is the mock recorder for MockRSConfigManager.
type MockRSConfigManagerMockRecorder struct {
	mock *MockRSConfigManager
}

// NewMockRSConfigManager creates a new mock instance.
func NewMockRSConfigManager(ctrl *gomock.Controller) *MockRSConfigManager {
	mock := &MockRSConfigManager{ctrl: ctrl}
	mock.recorder = &MockRSConfigManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRSConfigManager) EXPECT() *MockRSConfigManagerMockRecorder {
	return m.recorder
}

// ReadConfig mocks base method.
func (m *MockRSConfigManager) ReadConfig(ctx context.Context) (mongo.RSConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConfig", ctx)
	ret0, _ := ret[0].(mongo.RSConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadConfig indicates an expected call of ReadConfig.
func (mr *MockRSConfigManagerMockRecorder) ReadConfig(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfig", reflect.TypeOf((*MockRSConfigManager)(nil).ReadConfig), ctx)
}

// SetDefaultRWConcern mocks base method.
func (m *MockRSConfigManager) SetDefaultRWConcern(ctx context.Context, readConcern, writeConcern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultRWConcern", ctx, readConcern, writeConcern)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultRWConcern indicates an expected call of SetDefaultRWConcern.
func (mr *MockRSConfigManagerMockRecorder) SetDefaultRWConcern(ctx, readConcern, writeConcern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultRWConcern", reflect.TypeOf((*MockRSConfigManager)(nil).SetDefaultRWConcern), ctx, readConcern, writeConcern)
}

// WriteConfig mocks base method.
func (m *MockRSConfigManager) WriteConfig(ctx context.Context, cfg mongo.RSConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteConfig", ctx, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteConfig indicates an expected call of WriteConfig.
func (mr *MockRSConfigManagerMockRecorder) WriteConfig(ctx, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteConfig", reflect.TypeOf((*MockRSConfigManager)(nil).WriteConfig), ctx, cfg)
}
