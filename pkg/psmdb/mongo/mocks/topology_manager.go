// Code generated by MockGen. DO NOT EDIT.
// Source: topology_manager.go

// Package mock_mongo is a generated GoMock package.
package mock_mongo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "github.com/percona/percona-server-mongodb-operator/pkg/psmdb/mongo"
)

// MockTopologyManager is a mock of TopologyManager interface.
type MockTopologyManager struct {
	ctrl     *gomock.Controller
	recorder *MockTopologyManagerMockRecorder
}

// MockTopologyManagerMockRecorder is the mock recorder for MockTopologyManager.
type MockTopologyManagerMockRecorder struct {
	mock *MockTopologyManager
}

// NewMockTopologyManager creates a new mock instance.
func NewMockTopologyManager(ctrl *gomock.Controller) *MockTopologyManager {
	mock := &MockTopologyManager{ctrl: ctrl}
	mock.recorder = &MockTopologyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopologyManager) EXPECT() *MockTopologyManagerMockRecorder {
	return m.recorder
}

// CollectionStats mocks base method.
func (m *MockTopologyManager) CollectionStats(ctx context.Context, collName string) (mongo.CollectionStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionStats", ctx, collName)
	ret0, _ := ret[0].(mongo.CollectionStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionStats indicates an expected call of CollectionStats.
func (mr *MockTopologyManagerMockRecorder) CollectionStats(ctx, collName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionStats", reflect.TypeOf((*MockTopologyManager)(nil).CollectionStats), ctx, collName)
}

// IsMaster mocks base method.
func (m *MockTopologyManager) IsMaster(ctx context.Context) (*mongo.IsMasterResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMaster", ctx)
	ret0, _ := ret[0].(*mongo.IsMasterResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMaster indicates an expected call of IsMaster.
func (mr *MockTopologyManagerMockRecorder) IsMaster(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMaster", reflect.TypeOf((*MockTopologyManager)(nil).IsMaster), ctx)
}

// RSStatus mocks base method.
func (m *MockTopologyManager) RSStatus(ctx context.Context, initialSync bool) (mongo.ReplSetStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSStatus", ctx, initialSync)
	ret0, _ := ret[0].(mongo.ReplSetStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RSStatus indicates an expected call of RSStatus.
func (mr *MockTopologyManagerMockRecorder) RSStatus(ctx, initialSync interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSStatus", reflect.TypeOf((*MockTopologyManager)(nil).RSStatus), ctx, initialSync)
}

// StepDown mocks base method.
func (m *MockTopologyManager) StepDown(ctx context.Context, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StepDown", ctx, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// StepDown indicates an expected call of StepDown.
func (mr *MockTopologyManagerMockRecorder) StepDown(ctx, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StepDown", reflect.TypeOf((*MockTopologyManager)(nil).StepDown), ctx, force)
}
