// Code generated by MockGen. DO NOT EDIT.
// Source: sharder.go

// Package mock_mongo is a generated GoMock package.
package mock_mongo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "github.com/percona/percona-server-mongodb-operator/pkg/psmdb/mongo"
)

// MockSharder is a mock of Sharder interface.
type MockSharder struct {
	ctrl     *gomock.Controller
	recorder *MockSharderMockRecorder
}

// MockSharderMockRecorder is the mock recorder for MockSharder.
type MockSharderMockRecorder struct {
	mock *MockSharder
}

// NewMockSharder creates a new mock instance.
func NewMockSharder(ctrl *gomock.Controller) *MockSharder {
	mock := &MockSharder{ctrl: ctrl}
	mock.recorder = &MockSharderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharder) EXPECT() *MockSharderMockRecorder {
	return m.recorder
}

// AddShard mocks base method.
func (m *MockSharder) AddShard(ctx context.Context, rsName, host string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShard", ctx, rsName, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddShard indicates an expected call of AddShard.
func (mr *MockSharderMockRecorder) AddShard(ctx, rsName, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShard", reflect.TypeOf((*MockSharder)(nil).AddShard), ctx, rsName, host)
}

// IsBalancerRunning mocks base method.
func (m *MockSharder) IsBalancerRunning(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBalancerRunning", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBalancerRunning indicates an expected call of IsBalancerRunning.
func (mr *MockSharderMockRecorder) IsBalancerRunning(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBalancerRunning", reflect.TypeOf((*MockSharder)(nil).IsBalancerRunning), ctx)
}

// ListShard mocks base method.
func (m *MockSharder) ListShard(ctx context.Context) (mongo.ShardList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShard", ctx)
	ret0, _ := ret[0].(mongo.ShardList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShard indicates an expected call of ListShard.
func (mr *MockSharderMockRecorder) ListShard(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShard", reflect.TypeOf((*MockSharder)(nil).ListShard), ctx)
}

// RemoveShard mocks base method.
func (m *MockSharder) RemoveShard(ctx context.Context, shard string) (mongo.ShardRemoveResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveShard", ctx, shard)
	ret0, _ := ret[0].(mongo.ShardRemoveResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveShard indicates an expected call of RemoveShard.
func (mr *MockSharderMockRecorder) RemoveShard(ctx, shard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveShard", reflect.TypeOf((*MockSharder)(nil).RemoveShard), ctx, shard)
}

// StartBalancer mocks base method.
func (m *MockSharder) StartBalancer(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBalancer", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartBalancer indicates an expected call of StartBalancer.
func (mr *MockSharderMockRecorder) StartBalancer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBalancer", reflect.TypeOf((*MockSharder)(nil).StartBalancer), ctx)
}

// StopBalancer mocks base method.
func (m *MockSharder) StopBalancer(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopBalancer", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopBalancer indicates an expected call of StopBalancer.
func (mr *MockSharderMockRecorder) StopBalancer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopBalancer", reflect.TypeOf((*MockSharder)(nil).StopBalancer), ctx)
}
