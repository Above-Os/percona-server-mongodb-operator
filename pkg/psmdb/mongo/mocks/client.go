// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_mongo is a generated GoMock package.
package mock_mongo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "github.com/percona/percona-server-mongodb-operator/pkg/psmdb/mongo"
	bson "go.mongodb.org/mongo-driver/bson"
	readpref "go.mongodb.org/mongo-driver/mongo/readpref"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddShard mocks base method.
func (m *MockClient) AddShard(ctx context.Context, rsName, host string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShard", ctx, rsName, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddShard indicates an expected call of AddShard.
func (mr *MockClientMockRecorder) AddShard(ctx, rsName, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShard", reflect.TypeOf((*MockClient)(nil).AddShard), ctx, rsName, host)
}

// CollectionStats mocks base method.
func (m *MockClient) CollectionStats(ctx context.Context, collName string) (mongo.CollectionStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionStats", ctx, collName)
	ret0, _ := ret[0].(mongo.CollectionStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionStats indicates an expected call of CollectionStats.
func (mr *MockClientMockRecorder) CollectionStats(ctx, collName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionStats", reflect.TypeOf((*MockClient)(nil).CollectionStats), ctx, collName)
}

// CreateRole mocks base method.
func (m *MockClient) CreateRole(ctx context.Context, role string, privileges []mongo.RolePrivilege, roles []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, role, privileges, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockClientMockRecorder) CreateRole(ctx, role, privileges, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockClient)(nil).CreateRole), ctx, role, privileges, roles)
}

// CreateUser mocks base method.
func (m *MockClient) CreateUser(ctx context.Context, user, pwd string, roles ...map[string]interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, user, pwd}
	for _, a := range roles {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockClientMockRecorder) CreateUser(ctx, user, pwd interface{}, roles ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, user, pwd}, roles...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClient)(nil).CreateUser), varargs...)
}

// Dial mocks base method.
func (m *MockClient) Dial() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial")
	ret0, _ := ret[0].(error)
	return ret0
}

// Dial indicates an expected call of Dial.
func (mr *MockClientMockRecorder) Dial() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockClient)(nil).Dial))
}

// Disconnect mocks base method.
func (m *MockClient) Disconnect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockClientMockRecorder) Disconnect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockClient)(nil).Disconnect), ctx)
}

// GetFCV mocks base method.
func (m *MockClient) GetFCV(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFCV", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFCV indicates an expected call of GetFCV.
func (mr *MockClientMockRecorder) GetFCV(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFCV", reflect.TypeOf((*MockClient)(nil).GetFCV), ctx)
}

// GetRole mocks base method.
func (m *MockClient) GetRole(ctx context.Context, role string) (*mongo.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, role)
	ret0, _ := ret[0].(*mongo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockClientMockRecorder) GetRole(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockClient)(nil).GetRole), ctx, role)
}

// GetUserInfo mocks base method.
func (m *MockClient) GetUserInfo(ctx context.Context, username string) (*mongo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, username)
	ret0, _ := ret[0].(*mongo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockClientMockRecorder) GetUserInfo(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockClient)(nil).GetUserInfo), ctx, username)
}

// IsBalancerRunning mocks base method.
func (m *MockClient) IsBalancerRunning(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBalancerRunning", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBalancerRunning indicates an expected call of IsBalancerRunning.
func (mr *MockClientMockRecorder) IsBalancerRunning(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBalancerRunning", reflect.TypeOf((*MockClient)(nil).IsBalancerRunning), ctx)
}

// IsMaster mocks base method.
func (m *MockClient) IsMaster(ctx context.Context) (*mongo.IsMasterResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMaster", ctx)
	ret0, _ := ret[0].(*mongo.IsMasterResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMaster indicates an expected call of IsMaster.
func (mr *MockClientMockRecorder) IsMaster(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMaster", reflect.TypeOf((*MockClient)(nil).IsMaster), ctx)
}

// ListDatabases mocks base method.
func (m *MockClient) ListDatabases(ctx context.Context, options ...bson.E) (mongo.DBList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatabases", varargs...)
	ret0, _ := ret[0].(mongo.DBList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabases indicates an expected call of ListDatabases.
func (mr *MockClientMockRecorder) ListDatabases(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockClient)(nil).ListDatabases), varargs...)
}

// ListShard mocks base method.
func (m *MockClient) ListShard(ctx context.Context) (mongo.ShardList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShard", ctx)
	ret0, _ := ret[0].(mongo.ShardList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShard indicates an expected call of ListShard.
func (mr *MockClientMockRecorder) ListShard(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShard", reflect.TypeOf((*MockClient)(nil).ListShard), ctx)
}

// Ping mocks base method.
func (m *MockClient) Ping(ctx context.Context, pref *readpref.ReadPref) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, pref)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockClientMockRecorder) Ping(ctx, pref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockClient)(nil).Ping), ctx, pref)
}

// RSBuildInfo mocks base method.
func (m *MockClient) RSBuildInfo(ctx context.Context) (mongo.BuildInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSBuildInfo", ctx)
	ret0, _ := ret[0].(mongo.BuildInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RSBuildInfo indicates an expected call of RSBuildInfo.
func (mr *MockClientMockRecorder) RSBuildInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSBuildInfo", reflect.TypeOf((*MockClient)(nil).RSBuildInfo), ctx)
}

// RSStatus mocks base method.
func (m *MockClient) RSStatus(ctx context.Context, initialSync bool) (mongo.ReplSetStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSStatus", ctx, initialSync)
	ret0, _ := ret[0].(mongo.ReplSetStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RSStatus indicates an expected call of RSStatus.
func (mr *MockClientMockRecorder) RSStatus(ctx, initialSync interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSStatus", reflect.TypeOf((*MockClient)(nil).RSStatus), ctx, initialSync)
}

// ReadConfig mocks base method.
func (m *MockClient) ReadConfig(ctx context.Context) (mongo.RSConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConfig", ctx)
	ret0, _ := ret[0].(mongo.RSConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadConfig indicates an expected call of ReadConfig.
func (mr *MockClientMockRecorder) ReadConfig(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfig", reflect.TypeOf((*MockClient)(nil).ReadConfig), ctx)
}

// RemoveShard mocks base method.
func (m *MockClient) RemoveShard(ctx context.Context, shard string) (mongo.ShardRemoveResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveShard", ctx, shard)
	ret0, _ := ret[0].(mongo.ShardRemoveResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveShard indicates an expected call of RemoveShard.
func (mr *MockClientMockRecorder) RemoveShard(ctx, shard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveShard", reflect.TypeOf((*MockClient)(nil).RemoveShard), ctx, shard)
}

// SetDefaultRWConcern mocks base method.
func (m *MockClient) SetDefaultRWConcern(ctx context.Context, readConcern, writeConcern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultRWConcern", ctx, readConcern, writeConcern)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultRWConcern indicates an expected call of SetDefaultRWConcern.
func (mr *MockClientMockRecorder) SetDefaultRWConcern(ctx, readConcern, writeConcern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultRWConcern", reflect.TypeOf((*MockClient)(nil).SetDefaultRWConcern), ctx, readConcern, writeConcern)
}

// SetFCV mocks base method.
func (m *MockClient) SetFCV(ctx context.Context, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFCV", ctx, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFCV indicates an expected call of SetFCV.
func (mr *MockClientMockRecorder) SetFCV(ctx, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFCV", reflect.TypeOf((*MockClient)(nil).SetFCV), ctx, version)
}

// StartBalancer mocks base method.
func (m *MockClient) StartBalancer(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBalancer", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartBalancer indicates an expected call of StartBalancer.
func (mr *MockClientMockRecorder) StartBalancer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBalancer", reflect.TypeOf((*MockClient)(nil).StartBalancer), ctx)
}

// StepDown mocks base method.
func (m *MockClient) StepDown(ctx context.Context, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StepDown", ctx, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// StepDown indicates an expected call of StepDown.
func (mr *MockClientMockRecorder) StepDown(ctx, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StepDown", reflect.TypeOf((*MockClient)(nil).StepDown), ctx, force)
}

// StopBalancer mocks base method.
func (m *MockClient) StopBalancer(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopBalancer", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopBalancer indicates an expected call of StopBalancer.
func (mr *MockClientMockRecorder) StopBalancer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopBalancer", reflect.TypeOf((*MockClient)(nil).StopBalancer), ctx)
}

// UpdateRole mocks base method.
func (m *MockClient) UpdateRole(ctx context.Context, role string, privileges []mongo.RolePrivilege, roles []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, role, privileges, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockClientMockRecorder) UpdateRole(ctx, role, privileges, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockClient)(nil).UpdateRole), ctx, role, privileges, roles)
}

// UpdateUser mocks base method.
func (m *MockClient) UpdateUser(ctx context.Context, currName, newName, pass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, currName, newName, pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockClientMockRecorder) UpdateUser(ctx, currName, newName, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockClient)(nil).UpdateUser), ctx, currName, newName, pass)
}

// UpdateUserPass mocks base method.
func (m *MockClient) UpdateUserPass(ctx context.Context, name, pass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPass", ctx, name, pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPass indicates an expected call of UpdateUserPass.
func (mr *MockClientMockRecorder) UpdateUserPass(ctx, name, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPass", reflect.TypeOf((*MockClient)(nil).UpdateUserPass), ctx, name, pass)
}

// UpdateUserRoles mocks base method.
func (m *MockClient) UpdateUserRoles(ctx context.Context, username string, roles []map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRoles", ctx, username, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRoles indicates an expected call of UpdateUserRoles.
func (mr *MockClientMockRecorder) UpdateUserRoles(ctx, username, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRoles", reflect.TypeOf((*MockClient)(nil).UpdateUserRoles), ctx, username, roles)
}

// WriteConfig mocks base method.
func (m *MockClient) WriteConfig(ctx context.Context, cfg mongo.RSConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteConfig", ctx, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteConfig indicates an expected call of WriteConfig.
func (mr *MockClientMockRecorder) WriteConfig(ctx, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteConfig", reflect.TypeOf((*MockClient)(nil).WriteConfig), ctx, cfg)
}
