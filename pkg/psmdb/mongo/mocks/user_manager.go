// Code generated by MockGen. DO NOT EDIT.
// Source: user_manager.go

// Package mock_mongo is a generated GoMock package.
package mock_mongo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "github.com/percona/percona-server-mongodb-operator/pkg/psmdb/mongo"
)

// MockUserManager is a mock of UserManager interface.
type MockUserManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerMockRecorder
}

// MockUserManagerMockRecorder is the mock recorder for MockUserManager.
type MockUserManagerMockRecorder struct {
	mock *MockUserManager
}

// NewMockUserManager creates a new mock instance.
func NewMockUserManager(ctrl *gomock.Controller) *MockUserManager {
	mock := &MockUserManager{ctrl: ctrl}
	mock.recorder = &MockUserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManager) EXPECT() *MockUserManagerMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockUserManager) CreateRole(ctx context.Context, role string, privileges []mongo.RolePrivilege, roles []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, role, privileges, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockUserManagerMockRecorder) CreateRole(ctx, role, privileges, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockUserManager)(nil).CreateRole), ctx, role, privileges, roles)
}

// CreateUser mocks base method.
func (m *MockUserManager) CreateUser(ctx context.Context, user, pwd string, roles ...map[string]interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, user, pwd}
	for _, a := range roles {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserManagerMockRecorder) CreateUser(ctx, user, pwd interface{}, roles ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, user, pwd}, roles...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserManager)(nil).CreateUser), varargs...)
}

// GetRole mocks base method.
func (m *MockUserManager) GetRole(ctx context.Context, role string) (*mongo.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, role)
	ret0, _ := ret[0].(*mongo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockUserManagerMockRecorder) GetRole(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockUserManager)(nil).GetRole), ctx, role)
}

// GetUserInfo mocks base method.
func (m *MockUserManager) GetUserInfo(ctx context.Context, username string) (*mongo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, username)
	ret0, _ := ret[0].(*mongo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserManagerMockRecorder) GetUserInfo(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserManager)(nil).GetUserInfo), ctx, username)
}

// UpdateRole mocks base method.
func (m *MockUserManager) UpdateRole(ctx context.Context, role string, privileges []mongo.RolePrivilege, roles []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, role, privileges, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockUserManagerMockRecorder) UpdateRole(ctx, role, privileges, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockUserManager)(nil).UpdateRole), ctx, role, privileges, roles)
}

// UpdateUser mocks base method.
func (m *MockUserManager) UpdateUser(ctx context.Context, currName, newName, pass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, currName, newName, pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserManagerMockRecorder) UpdateUser(ctx, currName, newName, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserManager)(nil).UpdateUser), ctx, currName, newName, pass)
}

// UpdateUserPass mocks base method.
func (m *MockUserManager) UpdateUserPass(ctx context.Context, name, pass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPass", ctx, name, pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPass indicates an expected call of UpdateUserPass.
func (mr *MockUserManagerMockRecorder) UpdateUserPass(ctx, name, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPass", reflect.TypeOf((*MockUserManager)(nil).UpdateUserPass), ctx, name, pass)
}

// UpdateUserRoles mocks base method.
func (m *MockUserManager) UpdateUserRoles(ctx context.Context, username string, roles []map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRoles", ctx, username, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRoles indicates an expected call of UpdateUserRoles.
func (mr *MockUserManagerMockRecorder) UpdateUserRoles(ctx, username, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRoles", reflect.TypeOf((*MockUserManager)(nil).UpdateUserRoles), ctx, username, roles)
}
